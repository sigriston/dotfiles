" ********************************************
" * Thiago Massariolli Sigrist's .vimrc file *
" ********************************************

" (L) Thiago Massariolli Sigrist 2007-2014
" ----------------------------------------

" **************************************************************************** 
" **************************************************************************** 


" Be iMproved!
set nocompatible


" Incantations for vundle
" -----------------------

filetype off

" runtimepath for vundle
set rtp+=~/.vim/bundle/vundle/

" assume we don't have vundle
let s:has_vundle = 0

" assume we don't need to bootstrap vundle
let s:bootstrap_vundle = 0

" check if vundle is present
if isdirectory(glob("~/.vim/bundle/vundle"))
    let s:has_vundle = 1
endif   " <vundle is present>

" install vundle if not present
" inspired by http://gist.github.com/frasertweedale/8265874
" and by http://mg.pov.lt/vim/vimrc
" TODO: Windows?!?
if !s:has_vundle
    " install vundle iff git is present
    if filereadable(glob("`which git`"))
        silent !mkdir -p ~/.vim/bundle
        silent !git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle
        redraw!
        let s:has_vundle = 1
        let s:bootstrap_vundle = 1
    endif   " <git is present>
endif   " !s:has_vundle

if s:has_vundle
    " start vundle
    call vundle#rc()

    " vundle manages vundle
    Plugin 'gmarik/vundle'

    " My Plugins here:
    Plugin 'tpope/vim-fugitive'
    Plugin 'Lokaltog/vim-easymotion'
    Plugin 'scrooloose/nerdcommenter'
    Plugin 'myusuf3/numbers.vim'
    Plugin 'scrooloose/nerdtree'
    Plugin 'kien/ctrlp.vim'
    Plugin 'scrooloose/syntastic'
    Plugin 'tpope/vim-abolish'
    Plugin 'maxbrunsfeld/vim-yankstack'
    Plugin 'tpope/vim-surround'
    Plugin 'tpope/vim-repeat'
    Plugin 'altercation/vim-colors-solarized'
    Plugin 'w0ng/vim-hybrid'
    Plugin 'zeis/vim-kolor'
    Plugin 'jonathanfilip/vim-lucius'
    Plugin 'morhetz/gruvbox'
    Plugin 'vim-scripts/summerfruit256.vim'
    Plugin 'kien/rainbow_parentheses.vim'
    Plugin 'godlygeek/tabular'
    Plugin 'SirVer/ultisnips'
    Plugin 'honza/vim-snippets'
    Plugin 'bling/vim-airline'
    Plugin 'tristen/vim-sparkup'
    Plugin 'rking/ag.vim'
    Plugin 'nathanaelkane/vim-indent-guides'
    Plugin 'mhinz/vim-signify'
    Plugin 'mbbill/undotree'
    Plugin 'mutewinter/swap-parameters'
    Plugin 'Valloric/YouCompleteMe'
    Plugin 'mhinz/vim-startify'
    Plugin 'digitaltoad/vim-jade'
    Plugin 'wavded/vim-stylus'
    Plugin 'milkypostman/vim-togglelist'
    Plugin 'mattn/webapi-vim'
    Plugin 'mattn/gist-vim'
    Plugin 'nelstrom/vim-visual-star-search'
    Plugin 'sk1418/Join'
    Plugin 'benmills/vimux'
    Plugin 'rizzatti/funcoo.vim'
    Plugin 'rizzatti/dash.vim'
    Plugin 'osyo-manga/vim-anzu'
    Plugin 'Valloric/MatchTagAlways'
    Plugin 'kballenegger/vim-autoreadwatch'
    Plugin 'klen/python-mode'
    Plugin 'tpope/vim-unimpaired'
    Plugin 'gregsexton/gitv'
    Plugin 'tpope/vim-speeddating'
    "Plugin 'tpope/vim-endwise' - is there a way to enable it only for certain
    "filetypes?
    Plugin 'tpope/vim-markdown'
    Plugin 'editorconfig/editorconfig-vim'
    Plugin 'rodjek/vim-puppet'
    Plugin 'pangloss/vim-javascript'
    Plugin 'Raimondi/delimitMate'
    Plugin 'marijnh/tern_for_vim'
    Plugin 'mustache/vim-mustache-handlebars'
    Plugin 'elzr/vim-json'
    Plugin 'maksimr/vim-jsbeautify'
    Plugin 'majutsushi/tagbar'
    Plugin 'kchmck/vim-coffee-script'
    Plugin 'groenewege/vim-less'
    Plugin 'gkz/vim-ls'

    " bootstrap vundle if we have to
    if s:bootstrap_vundle
        " install all plugins
        silent PluginInstall
        quit

        " compile YCM
        silent !(cd ~/.vim/bundle/YouCompleteMe; ./install.sh)
    endif   " s:bootstrap_vundle
endif   " s:has_vundle

" Favorite colorscheme
let g:solarized_termcolors=256
let g:kolor_underlined=1
silent! colorscheme solarized

" Detects file type and enables language-specific indentation
" Syntax highlighting always on
syntax on
filetype plugin indent on

" Setup airline
set encoding=utf-8
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts=1

" Ruler always off
"set noruler

" statusline always visible
set laststatus=2
set noshowmode

" Automatic indentation on new line
set autoindent

" Expands tabs/indents to 4 characters
set expandtab
set tabstop=4
set shiftwidth=4
set softtabstop=4

" Smart line breaking
set linebreak

" Backspace options
set backspace=indent,eol,start

" Fold when markers are present
set foldmethod=marker

" Search highlighting and smartcase options
set hlsearch
set incsearch
set ignorecase
set smartcase

" Wildmenu FTW
set wildmenu

" Key bindings
map <F10> :qa<return>

" Virtual edit for visual blocks.
set virtualedit=block

" Use C syntax for .w files
let g:filetype_w = 'c'

" C-style indentation
autocmd FileType c,h,cpp,hpp,w set cindent

" C-style indentation options
" Non-default options here are:
"   - l1: align with a case label instead of the statement after it in the
"         same line. This is to have case blocks have the same indent whether
"         they have curly braces or not.
"   - (0: always have alignment match first non-white character in unopened
"         parentheses.
"   - U1: do the parens indenting even if the unopened parens is the last
"         character in its line.
"   - t0: indent a function return type declaration 0 chars from the margin.
set cinoptions=l1(0U1t0

" plugin configurations
if s:has_vundle
    " runtimepath for CtrlP
    set runtimepath^=~/.vim/bundle/ctrlp.vim

    " open CtrlP in mixed mode by default
    let g:ctrlp_cmd = 'CtrlPMixed'

    " Mapping for NERDTree
    nnoremap <Leader>n :NERDTreeToggle<CR>

    " Mapping for undotree
    nnoremap <F5> :UndotreeToggle<CR>

    " Tabularize mappings.
    if exists(":Tabularize")
        nmap <Leader>a= :Tabularize /=<CR>
        vmap <Leader>a= :Tabularize /=<CR>
        nmap <Leader>a: :Tabularize /:\zs<CR>
        vmap <Leader>a: :Tabularize /:\zs<CR>
    endif   " exists(":Tabularize")

    " UltiSnips config to avoid conflict with YouCompleteMe.
    let g:UltiSnipsExpandTrigger = "<C-j>"

    " vim-startify custom header
    let g:startify_custom_header = [
    \ "        ________ ++     ________",
    \ "       /VVVVVVVV\\++++  /VVVVVVVV\\",
    \ "       \\VVVVVVVV/++++++\\VVVVVVVV/",
    \ "        |VVVVVV|++++++++/VVVVV/'",
    \ "        |VVVVVV|++++++/VVVVV/'",
    \ "       +|VVVVVV|++++/VVVVV/'+",
    \ "     +++|VVVVVV|++/VVVVV/'+++++",
    \ "   +++++|VVVVVV|/VVVVV/'+++++++++",
    \ "     +++|VVVVVVVVVVV/'+++++++++",
    \ "       +|VVVVVVVVV/'+++++++++",
    \ "        |VVVVVVV/'+++++++++",
    \ "        |VVVVV/'+++++++++",
    \ "        |VVV/'+++++++++",
    \ "        'V/'   ++++++",
    \ "                 ++",
    \ "",
    \ ]

    " Enable line numbers.
    set number

    " Enable current-line highlighting
    set cursorline

    " python-mode
    let g:pymode_rope = 0
    let g:pymode_lint = 0
    let g:pymode_lint_write = 0
    let g:pymode_virtualenv = 1
    let g:pymode_syntax = 1
    let g:pymode_syntax_all = 1

    " Close preview window when done inserting.
    let g:ycm_add_preview_to_completeopt = 1
    let g:ycm_autoclose_preview_window_after_insertion = 1

    " anzu setup (plugin that shows number of occurrences when searching)
    " mapping
    nmap n <Plug>(anzu-n-with-echo)
    nmap N <Plug>(anzu-N-with-echo)
    nmap * <Plug>(anzu-star-with-echo)
    nmap # <Plug>(anzu-sharp-with-echo)

    " clear status
    nmap <Esc><Esc> <Plug>(anzu-clear-search-status)

    " statusline
    set statusline=%{anzu#search_status()}

    " delimitMate stuff
    let delimitMate_expand_cr = 2
    let delimitMate_expand_space = 1
    let delimitMate_jump_expansion = 1
    let delimitMate_balance_matchpairs = 1

    " syntastic stuff
    let g:syntastic_mode_map = { 'mode': 'active',
                               \ 'active_filetypes': [],
                               \ 'passive_filetypes': ['html'] }

    " Dash search
    nmap <Leader>] <Plug>DashSearch
    vmap <Leader>] <Plug>DashSearch

    " Tagbar stuff
    nnoremap <Leader>t :TagbarToggle<CR>

    " Fugitive stuff
    nnoremap <F7> :Gstatus<CR>

    " Rainbow Parenthesis
    au VimEnter * RainbowParenthesesToggle
    au Syntax * RainbowParenthesesLoadRound
    au Syntax * RainbowParenthesesLoadSquare
    au Syntax * RainbowParenthesesLoadBraces
endif   " s:has_vundle

" Automatic formatting of comments in C
" Non-default options here are:
"   - a: does automatic formatting of comment paragraphs.
"   - 1: prefers to line wrap before 1-letter words.
autocmd FileType c,h,cpp,hpp,w set formatoptions=acroql1
